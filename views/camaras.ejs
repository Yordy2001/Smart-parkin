<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/public/styles.css">
    <title>C치maras de Seguridad</title>
    <style>
        .camera-stream {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .live-stream {
            width: 100%;
            height: auto;
            display: block;
        }
        
        .stream-indicator {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255, 0, 0, 0.8);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .motion-indicator {
            background: rgba(255, 165, 0, 0.8);
        }
        
        .camera-type-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
        }
        
        .camera-offline {
            background: #f5f5f5;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 200px;
            border: 2px dashed #ddd;
            border-radius: 8px;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff6b35;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        
        .notification.show {
            transform: translateX(0);
        }
    </style>
</head>
<body>
    <header class="main-header">
        <h1>游뚱 Parqueo Inteligente</h1>
        <nav>
            <a href="/" class="nav-link">Dashboard</a>
            <a href="/parqueos" class="nav-link">Espacios</a>
            <a href="/camaras" class="nav-link active">C치maras</a>
            <a href="/reservas" class="nav-link">Reservas</a>
        </nav>
    </header>

    <main>
        <section class="cameras-header">
            <h2>游닞 C치maras de Seguridad ESP32-CAM</h2>
            <p>Monitoreo h칤brido: Streaming continuo + Detecci칩n de movimiento</p>
        </section>

        <section class="cameras-full-grid">
            <% cameraIds.forEach(camId => { 
                const config = cameraConfig[camId];
                const images = cameras[camId] || [];
                const lastImage = images[images.length - 1];
                const streamStatus = streamingCameras[camId];
            %>
                <div class="camera-full" data-camera-id="<%= camId %>">
                    <div class="camera-header">
                        <h3><%= config.name %></h3>
                        <span class="camera-type">
                            <%= config.type === 'stream' ? '游댮 STREAMING' : '游댌 DETECCI칍N' %>
                        </span>
                    </div>
                    
                    <% if (config.type === 'stream') { %>
                        <!-- C치mara de streaming continuo -->
                        <div class="camera-stream">
                            <img src="/api/camera/<%= camId %>/stream" 
                                 alt="Stream C치mara <%= camId %>" 
                                 class="live-stream"
                                 onload="markCameraOnline('<%= camId %>')"
                                 onerror="markCameraOffline('<%= camId %>')">
                            <div class="stream-indicator">游댮 EN VIVO</div>
                            <div class="camera-type-badge">STREAMING</div>
                        </div>
                        
                        <!-- Fallback si el stream no est치 disponible -->
                        <div id="offline-<%= camId %>" class="camera-offline" style="display: none;">
                            <div>
                                <div style="font-size: 48px; margin-bottom: 10px;">游닝</div>
                                <p><strong>C치mara Offline</strong></p>
                                <small>IP: <%= config.ip %></small><br>
                                <small>Verificar conexi칩n del ESP32-CAM</small>
                            </div>
                        </div>
                        
                    <% } else { %>
                        <!-- C치mara de detecci칩n de movimiento -->
                        <% if (lastImage) { %>
                            <div class="camera-current">
                                <div class="camera-stream">
                                    <img src="<%= lastImage.url %>" alt="C치mara <%= camId %>" 
                                         onclick="openImageModal('<%= lastImage.url %>', '<%= config.name %>')">
                                    <div class="stream-indicator motion-indicator">游댌 MOVIMIENTO</div>
                                    <div class="camera-type-badge">DETECCI칍N</div>
                                </div>
                                <div class="image-info">
                                    <div class="image-time">
                                        游늰 <%= new Date(lastImage.timestamp).toLocaleString() %>
                                    </div>
                                    <div class="image-size">
                                        游늺 <%= Math.round(lastImage.size / 1024) %> KB
                                    </div>
                                </div>
                            </div>
                            
                            <!-- 칔ltimas detecciones -->
                            <% if (images.length > 1) { %>
                                <div class="camera-history">
                                    <h4>칔ltimas detecciones (<%= images.length %>)</h4>
                                    <div class="history-thumbnails">
                                        <% images.slice(-6, -1).reverse().forEach(img => { %>
                                            <img src="<%= img.url %>" alt="Detecci칩n" class="thumbnail"
                                                 onclick="openImageModal('<%= img.url %>', '<%= config.name %>')">
                                        <% }) %>
                                    </div>
                                </div>
                            <% } %>
                        <% } else { %>
                            <div class="camera-no-image">
                                <div class="no-image-icon">游댌</div>
                                <p>Sin detecciones</p>
                                <small>Esta c치mara captura im치genes solo cuando detecta movimiento</small>
                            </div>
                        <% } %>
                    <% } %>
                </div>
            <% }) %>
        </section>
    </main>

    <!-- Modal para ver im치genes en grande -->
    <div id="imageModal" class="modal" onclick="closeImageModal()">
        <div class="modal-content">
            <span class="modal-close">&times;</span>
            <img id="modalImage" src="" alt="">
            <div id="modalTitle"></div>
        </div>
    </div>

    <!-- Notificaci칩n de movimiento detectado -->
    <div id="motionNotification" class="notification">
        <span id="notificationText"></span>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        
        // Escuchar detecciones de movimiento
        socket.on('motionDetected', (data) => {
            // Actualizar la imagen de la c치mara correspondiente
            const cameraElement = document.querySelector(`[data-camera-id="${data.camId}"]`);
            if (cameraElement) {
                const img = cameraElement.querySelector('.camera-current img');
                if (img) {
                    img.src = data.image.url;
                }
                
                // Actualizar informaci칩n de tiempo
                const timeElement = cameraElement.querySelector('.image-time');
                if (timeElement) {
                    timeElement.innerHTML = `游늰 ${new Date(data.image.timestamp).toLocaleString()}`;
                }
            }
            
            // Mostrar notificaci칩n
            showMotionNotification(data.cameraName, data.camId);
        });
        
        function showMotionNotification(cameraName, camId) {
            const notification = document.getElementById('motionNotification');
            const text = document.getElementById('notificationText');
            
            text.innerHTML = `游댌 Movimiento detectado en ${cameraName}`;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 5000);
        }
        
        function markCameraOnline(camId) {
            const offlineDiv = document.getElementById(`offline-${camId}`);
            if (offlineDiv) {
                offlineDiv.style.display = 'none';
            }
        }
        
        function markCameraOffline(camId) {
            const offlineDiv = document.getElementById(`offline-${camId}`);
            if (offlineDiv) {
                offlineDiv.style.display = 'block';
            }
        }

        function openImageModal(imageUrl, title) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            const modalTitle = document.getElementById('modalTitle');
            
            modal.style.display = 'flex';
            modalImg.src = imageUrl;
            modalTitle.textContent = title;
        }

        function closeImageModal() {
            document.getElementById('imageModal').style.display = 'none';
        }

        // Cerrar modal con ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeImageModal();
            }
        });

        // Para c치maras de detecci칩n, actualizar cada 30 segundos
        // Las de streaming se actualizan autom치ticamente
        setTimeout(() => {
            location.reload();
        }, 30000);
    </script>
</body>
</html>
