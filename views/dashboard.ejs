<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/public/styles.css">
    <title>Parqueo Inteligente - Dashboard</title>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <header class="main-header">
        <h1>üöó Parqueo Inteligente</h1>
        <nav>
            <a href="/" class="nav-link active">Dashboard</a>
            <a href="/parqueos" class="nav-link">Espacios</a>
            <a href="/camaras" class="nav-link">C√°maras</a>
        </nav>
    </header>

    <main class="dashboard">
        <!-- Estad√≠sticas principales -->
        <section class="stats-section">
            <div class="stat-card">
                <h3>Entradas</h3>
                <div class="stat-number" id="entryCount"><%= parkingState.entryCount %></div>
            </div>
            <div class="stat-card">
                <h3>Salidas</h3>
                <div class="stat-number" id="exitCount"><%= parkingState.exitCount %></div>
            </div>
            <div class="stat-card">
                <h3>Veh√≠culos Dentro</h3>
                <div class="stat-number" id="vehiclesInside"><%= vehiclesInside %></div>
            </div>
            <div class="stat-card">
                <h3>Espacios Libres</h3>
                <div class="stat-number available" id="availableSlots"><%= availableSlots %></div>
            </div>
        </section>

        <!-- Mapa de espacios -->
        <section class="parking-map">
            <h2>Mapa del Parqueo</h2>
            <div class="parking-grid">
                <% parkingState.slots.forEach(slot => { %>
                    <div class="parking-slot <%= slot.occupied ? 'occupied' : 'free' %>" 
                         data-slot="<%= slot.id %>">
                        <div class="slot-number"><%= slot.id %></div>
                        <div class="slot-status">
                            <%= slot.occupied ? 'üöó' : 'üü¢' %>
                        </div>
                        <% if (slot.updatedAt) { %>
                            <div class="slot-time">
                                <%= new Date(slot.updatedAt).toLocaleTimeString() %>
                            </div>
                        <% } %>
                    </div>
                <% }) %>
            </div>
        </section>

        <!-- √öltimas c√°maras -->
        <section class="cameras-preview">
            <h2>C√°maras de Seguridad</h2>
            <div class="cameras-grid">
                <% if (cameraIds.length === 0) { %>
                    <p class="no-data">No hay im√°genes de c√°maras disponibles</p>
                <% } else { %>
                    <% cameraIds.slice(0, 4).forEach(camId => { 
                        const images = parkingState.cameras[camId];
                        const lastImage = images[images.length - 1];
                    %>
                        <div class="camera-preview">
                            <h4>C√°mara <%= camId %></h4>
                            <% if (lastImage) { %>
                                <img src="<%= lastImage.url %>" alt="C√°mara <%= camId %>" 
                                     onclick="window.open('<%= lastImage.url %>', '_blank')">
                                <div class="image-time">
                                    <%= new Date(lastImage.timestamp).toLocaleString() %>
                                </div>
                            <% } else { %>
                                <div class="no-image">Sin imagen</div>
                            <% } %>
                        </div>
                    <% }) %>
                <% } %>
            </div>
            <a href="/camaras" class="view-all-btn">Ver todas las c√°maras ‚Üí</a>
        </section>

        <!-- Eventos recientes -->
        <section class="recent-events">
            <h2>Eventos Recientes</h2>
            <div class="events-list" id="eventsList">
                <% parkingState.events.slice(0, 10).forEach(event => { %>
                    <div class="event-item">
                        <div class="event-type event-<%= event.type.toLowerCase() %>">
                            <% if (event.type === 'ENTRY') { %>üöó‚û°Ô∏è
                            <% } else if (event.type === 'EXIT') { %>üöó‚¨ÖÔ∏è
                            <% } else if (event.type === 'SLOT_UPDATE') { %>üÖøÔ∏è
                            <% } else if (event.type === 'CAMERA_IMAGE') { %>üì∏
                            <% } %>
                        </div>
                        <div class="event-details">
                            <div class="event-description">
                                <% if (event.type === 'ENTRY') { %>
                                    Veh√≠culo ingres√≥ al parqueo
                                <% } else if (event.type === 'EXIT') { %>
                                    Veh√≠culo sali√≥ del parqueo
                                <% } else if (event.type === 'SLOT_UPDATE') { %>
                                    Espacio <%= event.data.slotId %> <%= event.data.occupied ? 'ocupado' : 'liberado' %>
                                <% } else if (event.type === 'CAMERA_IMAGE') { %>
                                    Nueva imagen de c√°mara <%= event.data.camId %>
                                <% } %>
                            </div>
                            <div class="event-time">
                                <%= new Date(event.timestamp).toLocaleString() %>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>
        </section>
    </main>

    <script>
        const socket = io();
        
        // Conectar y recibir estado inicial
        socket.on('initialState', (data) => {
            console.log('üì° Estado inicial recibido:', data);
            updateDashboard(data);
        });
        
        // Escuchar actualizaciones de espacios en tiempo real
        socket.on('slotUpdate', (data) => {
            console.log(`üÖøÔ∏è Actualizaci√≥n de espacio ${data.slotId}: ${data.occupied ? 'OCUPADO' : 'LIBRE'}`);
            
            const slotElement = document.querySelector(`[data-slot="${data.slotId}"]`);
            if (slotElement) {
                slotElement.className = `parking-slot ${data.occupied ? 'occupied' : 'free'}`;
                
                const statusElement = slotElement.querySelector('.slot-status');
                statusElement.textContent = data.occupied ? 'üöó' : 'üü¢';
                
                const timeElement = slotElement.querySelector('.slot-time');
                if (timeElement) {
                    timeElement.textContent = new Date(data.timestamp).toLocaleTimeString();
                }
                
                // Efecto visual para mostrar el cambio
                slotElement.style.transform = 'scale(1.05)';
                slotElement.style.transition = 'transform 0.3s ease';
                setTimeout(() => {
                    slotElement.style.transform = 'scale(1)';
                }, 300);
            }
        });
        
        // Escuchar estad√≠sticas actualizadas
        socket.on('parkingStats', (data) => {
            console.log('üìä Estad√≠sticas actualizadas:', data);
            document.getElementById('availableSlots').textContent = data.availableSlots;
            
            // Actualizar contador en la p√°gina de espacios si existe
            const availableCount = document.getElementById('availableCount');
            if (availableCount) {
                availableCount.textContent = data.availableSlots;
            }
        });
        
        function updateDashboard(data) {
            // Actualizar estad√≠sticas
            document.getElementById('entryCount').textContent = data.entryCount;
            document.getElementById('exitCount').textContent = data.exitCount;
            document.getElementById('vehiclesInside').textContent = data.vehiclesInside;
            document.getElementById('availableSlots').textContent = data.availableSlots;
            
            // Actualizar espacios de parqueo
            data.slots.forEach(slot => {
                const slotElement = document.querySelector(`[data-slot="${slot.id}"]`);
                if (slotElement) {
                    slotElement.className = `parking-slot ${slot.occupied ? 'occupied' : 'free'}`;
                    const statusElement = slotElement.querySelector('.slot-status');
                    statusElement.textContent = slot.occupied ? 'üöó' : 'üü¢';
                    
                    const timeElement = slotElement.querySelector('.slot-time');
                    if (slot.updatedAt && timeElement) {
                        timeElement.textContent = new Date(slot.updatedAt).toLocaleTimeString();
                    }
                }
            });
        }
        
        // Indicador de conexi√≥n
        socket.on('connect', () => {
            console.log('üîå Conectado al servidor en tiempo real');
        });
        
        socket.on('disconnect', () => {
            console.log('üîå Desconectado del servidor');
        });
    </script>
</body>
</html>
